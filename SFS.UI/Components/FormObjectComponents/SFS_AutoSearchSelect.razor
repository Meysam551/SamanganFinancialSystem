@typeparam TItem
@typeparam TValue

<div class="form-group mb-1 position-relative">
    <label class="form-label small">@Label</label>
    <input type="text"
           class="form-control form-control-sm"
           style="direction: rtl; text-align: right;"
           placeholder="@Placeholder"
           value="@searchText"
           @oninput="OnSearchChanged"
           @onfocus="() => showDropdown = true"
           @onblur="HideDropdownDelayed" />

    @if (showDropdown)
    {
        <div class="list-group position-absolute w-100 shadow-sm"
             style="z-index:1000; max-height:180px; overflow:auto;">
            @foreach (var item in FilteredItems)
            {
                <button type="button"
                        class="list-group-item list-group-item-action py-1 px-2"
                        style="font-size:0.85rem;"
                        @onclick="() => SelectItem(item)">
                    @TextSelector(item)
                </button>
            }
        </div>
    }
</div>


@code {
    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public string Placeholder { get; set; } = "جستجو...";
    [Parameter] public IEnumerable<TItem>? Items { get; set; }
    [Parameter] public Func<string, Task<IEnumerable<TItem>>>? LoadItemsAsync { get; set; }
    [Parameter] public Func<TItem, TValue> ValueSelector { get; set; } = default!;
    [Parameter] public Func<TItem, string> TextSelector { get; set; } = default!;
    [Parameter] public TValue? Value { get; set; }
    [Parameter] public EventCallback<TValue?> ValueChanged { get; set; }

    private bool showDropdown;
    private bool isLoading;
    private string searchText = string.Empty;
    private List<TItem> FilteredItems = new();

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? string.Empty;
        showDropdown = true;
        isLoading = true;
        StateHasChanged();

        if (LoadItemsAsync != null)
            FilteredItems = (await LoadItemsAsync(searchText)).ToList();
        else if (Items != null)
            FilteredItems = Items.Where(i => TextSelector(i).Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();

        isLoading = false;
        StateHasChanged();
    }

    private async Task SelectItem(TItem item)
    {
        Value = ValueSelector(item);
        searchText = TextSelector(item);
        showDropdown = false;
        await ValueChanged.InvokeAsync(Value);
    }

    private async void HideDropdownDelayed()
    {
        await Task.Delay(200);
        showDropdown = false;
        StateHasChanged();
    }
}
